Object Oriented Programming: 

const createAcc = () => {
    return { sum: 0 }
}
const inc = item => { item.sum = item.sum + 1 }
let a = createAcc();
let b = createAcc();
inc(b);
console.log(a.sum); //sum is 0
console.log(b.sum); //sum is 1

OOP is not popular on the web but super popular on mobile !

CLASS: 

    class Car {

    }

    let my car = new Car();
    let yourCar = new Car();

    a class can be seen as blue print to create an object.

    CONSTRUCTOR:
            class Car {
                constructor (brand){
                    this.brand = brand;
                }
            }
        let my car = new Car ("Toyota")
        let yourCar = new Car ("honda")

        the constructor let's us call it with a proprety,here a car brand to create an object
        with brand key and parameter value


        class City {
            constructor (p,n) {
                this.potholes = p;
                this.name = n;
            }
        }

        let montreal = new City (3000, "Montreal")

    CLASS HAVE METHODS:

        class Car {
            noise = () => console.log('vroom') //THIS IS A METHOD DEFINED ON THE CLASS 
        }

        let mazda = new Car()

        mazda.noise();


    Exercise 1 : 

        // 1. Given this class, how would we represent its hunger level?
        // 2. How could we represent varying hunger levels based on activity?
        // 3. How about when it eats?
        
        class Animal {
            constructor (initalHunger){
                this.hunger = initalHunger
            }

            goForAWalk = () => {
                this.hunger += 10;
            }

            goToDogPark = () => {
                this.hunger += 30;
            }

            haveASnack = () => {
                this.hunger -= 20;
            }
        }

        let spot = new Animal(50);

        spot.goForAWalk();
        spot.goToDogPark();
        console.log(spot);

CHAINING :
     
     you can have two classes. One extends the other. THe proprerty in the lower class overrides the
     one in the upper class. super() calls the parent. 

     Class Human {

     }

     class Male extends Human {
         
     }